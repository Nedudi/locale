{"version":3,"sources":["index.js","locale.js","locales.js"],"names":["Locale","require","Locales","supported","def","supportedLocales","req","res","next","locales","headers","locale","String","bestLocale","app","defaultLocaleString","process","env","LANG","str","_classCallCheck","this","match","_match","_slicedToArray","language","country","toLowerCase","normalized","toUpperCase","push","join","code","prototype","serialize","toJSON","default","input","elements","split","Array","slice","map","item","_item$split","_item$split2","q","locale2","trim","score","filter","e","sort","b","a","_index","idx","defaulted","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","setLocale","r","appropriateIndex","appropriateLocaleIndex","l","err","return","concat","_toConsumableArray","index","normalizedIndex","languageIndex","sameLanguageLocaleIndex","findIndex","module","exports"],"mappings":"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","file":"min.js","sourcesContent":["const Locale = require('./locale');\nconst Locales = require('./locales');\n\nconst app = function (supported, def) {\n  let supportedLocales = supported;\n\n  if (!(supportedLocales instanceof Locales)) {\n    supportedLocales = new Locales(supportedLocales, def);\n    supportedLocales.index();\n  }\n\n  return (req, res, next) => {\n    const locales = new Locales(req.headers['accept-language']);\n\n    const bestLocale = locales.best(supportedLocales);\n    req.locale = String(bestLocale);\n    req.rawLocale = bestLocale;\n    next();\n  };\n};\n\napp.Locales = Locales;\napp.Locale = Locale;\n\nmodule.exports = app;\n","const defaultLocaleString = () => process.env.LANG || 'en_US';\n\nclass Locale {\n  constructor(str) {\n    if (!str) return null;\n\n    const match = str.match(/[a-z]+/gi);\n    const [language, country] = match;\n\n    this.code = str;\n    this.language = language.toLowerCase();\n    const normalized = [this.language];\n\n    if (country) {\n      this.country = country.toUpperCase();\n      normalized.push(this.country);\n    }\n\n    this.normalized = normalized.join('_');\n  }\n\n  serialize() {\n    if (!this.language) return null;\n    return this.code;\n  }\n}\nLocale.prototype.toString = Locale.prototype.serialize;\nLocale.prototype.toJSON = Locale.prototype.serialize;\nLocale.default = new Locale(defaultLocaleString());\n\nmodule.exports = Locale;\n","const Locale = require('./locale');\n\nclass Locales {\n  constructor(input, def) {\n    let elements = [];\n\n    if (input) {\n      if (typeof input === 'string' || input instanceof String) {\n        elements = input.split(',');\n      } else if (input instanceof Array) {\n        elements = input.slice();\n      }\n\n      elements = elements\n        .map(function (item) {\n          if (!item) return null;\n\n          const [locale, q] = item.split(';');\n          const locale2 = new Locale(locale.trim());\n          let score = 1;\n\n          if (q) {\n            score = q.slice(2) || 0;\n          }\n\n          locale2.score = score;\n\n          return locale2;\n        })\n        .filter(e => e instanceof Locale)\n        .sort((a, b) => b.score - a.score);\n    }\n\n    this.elements = elements;\n    this._index = null;\n    if (def) {\n      this.default = new Locale(def);\n    }\n  }\n\n  index() {\n    if (!this._index) {\n      this._index = {};\n\n      this.elements.forEach(function (locale, idx) {\n        this._index[locale.normalized] = idx;\n      }, this);\n    }\n    return this._index;\n  }\n\n  best(locales) {\n    const setLocale = function (l) {\n      const r = l;\n      r.defaulted = false;\n      return r;\n    };\n\n    let locale = Locale.default;\n    if (locales && locales.default) {\n      locale = locales.default;\n    }\n    locale.defaulted = true;\n\n    if (!locales) {\n      if (this.elements[0]) {\n        locale = this.elements[0];\n        locale.defaulted = true;\n      }\n      return locale;\n    }\n\n    for (const item of this.elements) { // eslint-disable-line no-restricted-syntax\n      const appropriateLocaleIndex = Locales.appropriateIndex(locales, item);\n\n      if (appropriateLocaleIndex !== null) {\n        return setLocale(locales.elements[appropriateLocaleIndex]);\n      }\n    }\n\n    return locale;\n  }\n\n  static appropriateIndex(locales, locale) {\n    const index = locales.index();\n\n    const normalizedIndex = index[locale.normalized];\n    const languageIndex = index[locale.language];\n\n    if (normalizedIndex !== undefined) {\n      return normalizedIndex;\n    } else if (languageIndex !== undefined) {\n      return languageIndex;\n    }\n\n    const sameLanguageLocaleIndex = locales.elements.findIndex(l => l.language === locale.language);\n    if (sameLanguageLocaleIndex > -1) return sameLanguageLocaleIndex;\n\n    return null;\n  }\n\n  serialize() {\n    return [...this.elements];\n  }\n\n  toString() {\n    return String(this.toJSON());\n  }\n}\nLocales.prototype.toJSON = Locales.prototype.serialize;\nLocales.prototype.sort = Array.prototype.sort;\nLocales.prototype.push = Array.prototype.push;\n\nmodule.exports = Locales;\n"]}